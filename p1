#!/usr/bin/env perl

use strict;
use warnings;

package Sucrose;

package Sucrose::Parser;

use Any::Moose;
use Carp;

our $TCA = sub { # Table/Column Accessor
    my $caller = caller;
    my $name = shift;
    my $error = shift;
    $caller->meta->add_method( $name => sub {
        my $self = shift;
        if ( @_ ) {
            my $value = shift;
            croak $error if $error && ! defined $value;
            return $self->{data}->{$name} = $value;
        }
        else {
            my $value = $self->{data}->{$name};
            croak $error if $error && ! defined $value;
            return $value;
        }
    } );
};

use Mouse::Exporter;
Mouse::Exporter->setup_import_methods(
    as_is => [qw/
        Type Integer Int Text Blob 
        NotNull Null
    /],
    with => [ any_moose ],
);

for (qw/ Integer Number Text Blob /) {
    my $type = $_;
    __PACKAGE__->meta->add_method( $type => sub {
        return Sucrose::Parser::Token->new( type => $type );
    } );
}
#*Int = \&Integer;

sub NotNull { return Sucrose::Parser::Token->new( nullable => 0 ) }
sub Null { return Sucrose::Parser::Token->new( nullable => 1 ) }

package Sucrose::Parser::Token;

use Any::Moose;

use Carp;

has name => qw/ is ro required 1 isa Str /;
has value => qw/ is ro required 1 /;
has arguments => qw/ is ro isa Maybe[HashRef] /;

sub BUILDARGS {
    my $self = shift;
    return { @_ } unless @_ <= 3;
    my %given = ( name => shift, value => shift );
    $given{arguments} = shift if @_;
    return \%given;
}

package Sucrose::Schema;

use Any::Moose;
use Carp;

has _tables => qw/ metaclass Collection::Hash is ro lazy_build 1 isa HashRef /;
sub _build__tables { {} }

sub table {
    my $self = shift;
    my $name = shift;
    my $table = $self->_tables->{$name} or croak "Invalid table ($name)";
    return $table;
}

has dbic_class => qw/ is rw isa Str required 1 /;

sub load {
    my $self = shift;

    my $class = $self->dbic_class;
    Mouse::Meta::Class->initialize( $class )->superclasses(qw/ DBIx::Class::Schema /);

    for my $table (values %{ $self->_tables }) {
        $table->load;
    }
}

package Sucrose::Table;

use Any::Moose;
use Any::Moose 'X::AttributeHelpers';

use Carp;

has schema => qw/ is ro required 1 weak_ref 1 /;

has data => qw/ is ro isa HashRef lazy_build 1 /;
sub _build_data { {} }

$TCA->( 'name' => 'Missing name' );
$TCA->( 'type' => 'Missing type' );
$TCA->( 'nullable' );

#has _columns => qw/ metaclass Collection::Array is ro required 1 isa ArrayRef /,
#    default => sub { [] },
#    provides => {qw/
#        elements    columns
#        push        add_column
#    /}
#;
has _columns => qw/ metaclass Collection::Hash is ro lazy_build 1 isa HashRef /;
sub _build__columns { {} }

sub column {
    my $self = shift;
    my $name = shift;
    if ( @_ ) {
        croak "Existing column ($name)" if $self->_columns->{$name};
        $self->_columns->{$name} = shift;
    }
    else {
        my $column = $self->_columns->{$name} or croak "Invalid column ($name)";
        return $column;
    }
}

sub load {
    my $self = shift;

    my $class = $self->dbic_class;
    Mouse::Meta::Class->initialize( $class )->superclasses(qw/ DBIx::Class /);
    my $schema_class = $self->schema->dbic_class;

    $class->load_components( $self->dbic_load_components );
    $class->table( $self->dbic_table );

    for my $column (values %{ $self->_columns }) {
        $column->load;
    }

    $schema_class->register_class( $self->name, $class );
}

has __dbic_load_components => qw/ metaclass Collection::Array is rw lazy_build 1 isa ArrayRef /,
    provides => {qw/
        elements    _dbic_load_components
    /}
;
sub _build___dbic_load_components { [qw/ ? /] }

sub dbic_load_components {
    my $self = shift;
    return map { $_ ne '?' ? $_ : qw/ PK::Auto Core / } $self->_dbic_load_components;
}

has dbic_class => qw/ is rw isa Str lazy_build 1 /;
sub _build_dbic_class {
    my $self = shift;
    return join '::', $self->schema->dbic_class, 'Result', $self->name;
}
#    # TODO X::
#    Mouse::Meta::Class->initialize( $class );
#    return $class;
#}

has dbic_table => qw/ is rw isa Str lazy_build 1 /;
sub _build_dbic_table {
    my $self = shift;

    my $name = $self->name;
    my $table = lc $name;
    $table =~ s/::/_/g;

    croak "Going from name \"$name\" to table \"$table\" looks weird" if $table =~ m/[^\w_\.]/;

    return $table;
}

package Sucrose::Column;

use Any::Moose;
use Carp;

has schema => qw/ is ro lazy_build 1 weak_ref 1 /;
sub _build_schema { shift->table->schema }
has table => qw/ is ro required 1 weak_ref 1 /;

has data => qw/ is ro isa HashRef lazy_build 1 /;
sub _build_data { {} }

$TCA->( 'name' => 'Missing name' );
$TCA->( 'type' => 'Missing type' );
$TCA->( 'nullable' );

sub load {
    my $self = shift;
    $self->table->dbic_class->add_column(
        $self->name, {
            data_type => $self->type,
            nullable => $self->nullable,
        },
    );
}

package main;

use Test::Most;

plan qw/ no_plan /;

ok( 1 );

use String::Util qw/ :all /;
use Carp;

my %macro = (
    table => {
        id => sub {
        },
        uuid => sub {
        },
    },
    column => {
    },
);

sub _invoke_macro {
    my $category = shift;
    my $name = shift;
    my $target = shift;

    croak "Unknown macro category ($category)" unless my $macro_category = $macro{$category};
    croak "Unknown macro ($name)" unless my $macro = $macro_category->{$name};

    $macro->( $target, @_ );
}

sub _parse_table {
    my $table = shift;
    my @input = @_;

    my $column;
    while ( @input ) {
        if ( ! ref $input[0] ) {
            if ( hascontent $input[0] && $input[0] =~ m/^\w/) {
                my $name = shift @input;
                $column = Sucrose::Column->new( table => $table );
                $column->name( $name );
                $table->column( $column->name => $column );
            }
            elsif ( hascontent $input[0] && $input[0] =~ s/^-//) {
                my $macro = shift @input;
                if ( $column ) {
                    _invoke_macro column => $macro, $column;
                }
                else {
                    _invoke_macro table => $macro, $table;
                }
            }
            else {
                croak "Invalid table input (@input)";
            }
        }
        elsif ( blessed $input[0] && $input[0]->isa( 'Sucrose::Parser::Token' ) ) {
            my $token = shift @input;
            if ( $column ) {
                $column->data->{ $token->name } = $token->value;
            }
            else {
                $table->data->{ $token->name } = $token->value;
            }
        }
        else {
            croak "Invalid table input (@input)";
        }
    }
}

sub parse {
    my @input = @_;

    my $schema = Sucrose::Schema->new( dbic_class => 'Schema' );

    while ( @input ) {
        if ( ! ref $input[0] && ref $input[1] eq 'ARRAY' && hascontent $input[0] ) {
            my $name = shift @input;
            my @table_input = @{ shift @input };
            my $table = Sucrose::Table->new( schema => $schema );
            $table->name( $name );
            $schema->_tables->{ $table->name } = $table;
            _parse_table $table => @table_input;
        }
        else {
            croak "Invalid input (@input)";
        }
    }

    return $schema;
}

BEGIN {
    no strict 'refs';
    for (qw/ Integer Text NotNull Null /) {
        *$_ = \&{"Sucrose::Parser::$_"};
    }

}

my $schema = parse(
    Artist => [
        -uuid,
        name => Text, NotNull,
        age => Integer, NotNull,
    ],

    Cd => [
        title => Text, NotNull,
        SKU => Text, NotNull,
    ],
);

my ( $table, $column );

{
    ok( $table = $schema->table( 'Artist' ) );
    cmp_deeply( $table->__dbic_load_components, [qw/ ? /] );
    {
        ok( $column = $table->column( 'name' ) );
        is( $column->type,  'Text' );
        is( $column->name,  'name' );
        ok( defined $column->nullable );
        ok( ! $column->nullable );
    }
}

ok( $table = $schema->table( 'Cd' ) );

$schema->load;
my $_schema = $schema->dbic_class->connect( "dbi:SQLite:dbname=test.sqlite" );
my $deploy = $_schema->deployment_statements( undef, undef, undef, { add_drop_table => 1 } );
my @deploy = split m/;\n/, $deploy;
warn join "\n", @deploy, '';

1;
